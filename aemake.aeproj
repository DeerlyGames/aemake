AEMAKE_TOOL_OS=nil
if os.host() == "linux" then
	AEMAKE_TOOL_OS="Linux64"
elseif os.host() == "macosx" then
	AEMAKE_TOOL_OS="MacOS"
elseif os.host() == "windows" then
	AEMAKE_TOOL_OS="Win64"
end

solution 	"aemake"
	configurations { "Release", "Debug" }
	location   ("Build/".._OPTIONS["target"])
	flags { "No64BitChecks", "StaticRuntime", "MultiProcessorCompile" }
	warnings "Extra"

	filter "configurations:Debug"
		defines     "_DEBUG"
		symbols     "On"

	filter "configurations:Release"
		defines     "NDEBUG"
		optimize    "Full"
		flags       { "NoBufferSecurityCheck", "NoRuntimeChecks" }

	filter "action:vs*"
		defines     { "_CRT_SECURE_NO_DEPRECATE", "_CRT_SECURE_NO_WARNINGS", "_CRT_NONSTDC_NO_WARNINGS" }

	filter { "system:windows", "configurations:Release" }
		flags       { "NoIncrementalLink", "LinkTimeOptimization" }

	filter { "system:macosx", "action:gmake" }
		buildoptions { "-mmacosx-version-min=10.4" }
		linkoptions  { "-mmacosx-version-min=10.4" }

project "aemake"
	targetdir	"%{cfg.objdir}/%{cfg.buildcfg}"
	kind 		"ConsoleApp"
	language 	"C++"
	location   ("Build/".._OPTIONS["target"])
	objdir 		"%{cfg.location}"
	targetdir	"%{cfg.objdir}/%{cfg.buildcfg}"


	files 
	{ 
		"contrib/lua/src/*.c",
		"contrib/lua/src/*.h",
		"contrib/luashim/*.h",
		"contrib/zlib/*.c",
		"modules/**.lua",
		"scripts/**.lua",
		"src/**.c",
		"src/**.h",
		"src/**.lua"
	}

	excludes
	{
		"contrib/lua/src/lauxlib.c",
		"contrib/lua/src/lua.c",
		"contrib/lua/src/luac.c",
		"contrib/lua/src/print.c"
	}

	includedirs
	{ 	
		"src/host",
		"contrib/lua/src",
		"contrib/luashim"
	}

	include ("scripts/embed.lua")

if 	os.host() ~= "windows" then
	prebuildcommands {
		"chmod u+x \"../../Tools/"..AEMAKE_TOOL_OS.."/rcc\"",
		"chmod u+x \"../../Tools/"..AEMAKE_TOOL_OS.."/moc\"",
		"chmod u+x \"../../Tools/"..AEMAKE_TOOL_OS.."/uic\""
	}
end

	filter "system:windows"
		files{	"aemake.rc"}
		links{ "Gdi32", "Imm32", "Ole32", "Version"}

	filter { "action:gmake", "system:windows", "configurations:Release"}
		linkoptions { "-static-libgcc -static-libstdc++" }
		postbuildcommands{"\"..\\..\\zip\" -rj ../../aemake-%{cfg.system}.zip Release/aemake.exe"}

	filter "system:linux or bsd or hurd"
		defines     { "LUA_USE_POSIX", "LUA_USE_DLOPEN" }
		links       { "m" }
		linkoptions { "-rdynamic -static-libgcc -static-libstdc++" }

	filter "system:linux"
		links       { "dl", "rt" }

	configuration "macosx"
		defines     { "LUA_USE_MACOSX" }
		links       { "CoreServices.framework" }

	filter { "system:macosx", "action:gmake" }
		buildoptions { "-mmacosx-version-min=10.9" }
		linkoptions  { "-mmacosx-version-min=10.9" }

	filter { "system:linux or macosx", "configurations:Release"}
		postbuildcommands{"zip -rj ../../aemake-%{cfg.system}.zip Release/aemake"}

if _ACTION == "clean" then
	os.rmdir("aemake.xcworkspace")
	os.rmdir("Build")
	os.rmdir(".vs")
	os.remove("aemake.VC.db")
	os.remove("aemake.vcxproj")
	os.remove("aemake.vcxproj.filters")
	os.remove("aemake.make")
	os.remove("*.sln")
	os.remove("*.sdf")
	os.remove("*.opendb")
	os.remove("*.opensdf")
	os.remove("Makefile")
end