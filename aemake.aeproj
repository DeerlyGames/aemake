AEMAKE_TOOL_OS=nil
if os.host() == "linux" then
	AEMAKE_TOOL_OS="Linux64"
elseif os.host() == "macosx" then
	AEMAKE_TOOL_OS="MacOS"
elseif os.host() == "windows" then
	AEMAKE_TOOL_OS="Win64"
end

solution 	"aemake"
	configurations { "Release", "Debug" }
	location   ("Build/".._OPTIONS["target"])
	flags { "No64BitChecks", "StaticRuntime", "MultiProcessorCompile" }
	warnings "Extra"

	filter "configurations:Debug"
		defines     "_DEBUG"
		symbols     "On"

	filter "configurations:Release"
		defines     "NDEBUG"
		optimize    "Full"
		flags       { "NoBufferSecurityCheck", "NoRuntimeChecks" }

	filter "action:vs*"
		defines     { "_CRT_SECURE_NO_DEPRECATE", "_CRT_SECURE_NO_WARNINGS", "_CRT_NONSTDC_NO_WARNINGS" }

	filter { "system:windows", "configurations:Release" }
		flags       { "NoIncrementalLink", "LinkTimeOptimization" }

	filter { "system:macosx", "action:gmake" }
		buildoptions { "-mmacosx-version-min=10.4" }
		linkoptions  { "-mmacosx-version-min=10.4" }

project 	"aemake"
	targetdir	"%{cfg.objdir}/%{cfg.buildcfg}"
	kind 		"ConsoleApp"
	language 	"C++"
	location   ("Build/".._OPTIONS["target"])
	objdir 		"%{cfg.location}"
	targetdir	"%{cfg.objdir}/%{cfg.buildcfg}"


	files 
	{ 
		"contrib/lua/src/*.c",
		"contrib/lua/src/*.h",
	--	"contrib/luashim/*.c",
		"contrib/luashim/*.h",
		"contrib/zlib/*.c",
		"modules/**.lua",
		"scripts/**.lua",
		"src/**.c",
		"src/**.h",
		"src/**.lua",
		"source/**.cpp",
		"source/**.ui",
		"source/**.h",
		"source/**.ui",
		"*.h",
		"aemake.qrc"
	}

	excludes
	{ 	
		"src/host/premake_main.c",
		"contrib/lua/src/lauxlib.c",
		"contrib/lua/src/lua.c",
		"contrib/lua/src/luac.c",
		"contrib/lua/src/print.c"
	}

	includedirs
	{ 	
		"src/host",
		"source/generated",
		"source/views",
		"contrib/lua/src",
		"contrib/luashim"
	}

	include ("scripts/embed.lua")

if 	os.host() ~= "windows" then
	prebuildcommands {
		"chmod u+x \"../../Tools/"..AEMAKE_TOOL_OS.."/rcc\"",
		"chmod u+x \"../../Tools/"..AEMAKE_TOOL_OS.."/moc\"",
		"chmod u+x \"../../Tools/"..AEMAKE_TOOL_OS.."/uic\""
	}
end

	filter "system:windows"
		files{	"aemake.rc"}
		links{ "Gdi32", "Imm32", "Ole32", "Shlwapi", "uuid", "Version", "Winspool", "Ws2_32" }
		includedirs{
			"contrib/qt4/Include",
			"contrib/qt4/Include/QtCore",
			"contrib/qt4/Include/QtGui"
		}
	filter { "action:gmake","system:windows"}
		files{	"aemake.rc"}	
		linkoptions { "-static-libgcc -static-libstdc++" }
		linkoptions 
		{ 
			"../../contrib/qt4/Lib/Win64/%{cfg.buildcfg}/libQtGui.a",
			"../../contrib/qt4/Lib/Win64/%{cfg.buildcfg}/libQtSvg.a",
			"../../contrib/qt4/Lib/Win64/%{cfg.buildcfg}/libQtCore.a",
		}
	

	filter "system:linux or bsd or hurd"
		defines     { "LUA_USE_POSIX", "LUA_USE_DLOPEN" }
		links       { "m" }
		linkoptions { "-rdynamic -static-libgcc -static-libstdc++" }

	filter "system:linux"
		cppdialect "C++11"
		links       { "dl", "rt", "pthread", "X11", "Xext", "xcb" }
		buildoptions{"-fPIC" }
		linkoptions 
		{ 
			"../../contrib/qt5/Lib/Linux64/libQt5Widgets.a",
			"../../contrib/qt5/Lib/Linux64/libQt5Gui.a",
			"../../contrib/qt5/Lib/Linux64/libqtharfbuzz.a",
			"../../contrib/qt5/Lib/Linux64/libqtlibpng.a",
			"../../contrib/qt5/Lib/Linux64/libQt5Core.a",
			"../../contrib/qt5/Lib/Linux64/libqtpcre2.a",
			"../../contrib/qt5/Lib/Linux64/libqminimal.a",
			"../../contrib/qt5/Lib/Linux64/libxcb-static.a",
			"../../contrib/qt5/Lib/Linux64/libqxcb.a",
			"../../contrib/qt5/Lib/Linux64/libQt5XcbQpa.a",
			--
			
		}
		includedirs{
			"contrib/qt5/Include",
			"contrib/qt5/Include/QtCore",
			"contrib/qt5/Include/QtGui",
			"contrib/qt5/Include/QtWidgets"
		}

	configuration "macosx"
		defines     { "LUA_USE_MACOSX" }
		links       { "CoreServices.framework" }

	filter { "system:macosx", "action:gmake" }
		buildoptions { "-mmacosx-version-min=10.9" }
		linkoptions  { "-mmacosx-version-min=10.9" }

	filter "files:source/views/*.h"
		buildmessage 'Compiling %{file.relpath}'
		buildcommands {
		  "\"../../Tools/"..AEMAKE_TOOL_OS.."/moc\" \"%{file.relpath}\" -o \"../../source/generated/moc_%{file.basename}.cpp\""
		}
		buildoutputs { "../../source/generated/moc_%{file.basename}.cpp" }

	filter "files:source/views/**.ui"
		buildmessage 'Compiling %{file.relpath}'
		buildcommands {
		  "\"../../Tools/"..AEMAKE_TOOL_OS.."/uic\" \"%{file.relpath}\" -o \"../../source/generated/ui_%{file.basename}.h\""
		}
		buildoutputs { "source/generated/ui_%{file.basename}.h" }

	filter "files:**.qrc"
		buildmessage 'Compiling %{file.relpath}'
		buildcommands {
		  "\"../../Tools/"..AEMAKE_TOOL_OS.."/rcc\" \"%{file.relpath}\" -o \"../../source/generated/%{file.basename}Resources.cpp\""
		}
		buildoutputs { "../../source/generated/%{file.basename}Resources.cpp" }


if _ACTION == "clean" then
	os.rmdir("aemake.xcworkspace")
	os.rmdir("Build")
	os.rmdir(".vs")
	os.remove("aemake.VC.db")
	os.remove("aemake.vcxproj")
	os.remove("aemake.vcxproj.filters")
	os.remove("aemake.make")
	os.remove("*.sln")
	os.remove("*.sdf")
	os.remove("*.opendb")
	os.remove("*.opensdf")
	os.remove("Makefile")
end